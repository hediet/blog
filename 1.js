(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{87:function(i,e,t){const s=t(97),n=t(98).data,l=new s.MainPage(n);i.exports.page=l},97:function(i,e,t){"use strict";(function(i){Object.defineProperty(e,"__esModule",{value:!0});const s=t(0),n=t(41),l=t(25),d=t(42),m=t(85);e.MainPage=class extends m.BasePage{constructor(){super(...arguments),this.module=i}get title(){return"Hediet's Blog"}render(){return s.createElement(n.PageFrame,Object.assign({},this.data.baseData),this.data.recentPosts.map((i,e)=>s.createElement("div",{key:e,className:"postSummary"},s.createElement("div",{className:"postSummaryHeader"},s.createElement("h2",null,s.createElement(l.Link,{to:i.ref},i.title)),s.createElement("div",{className:"date"},new Date(i.date).toLocaleDateString("en-US",{day:"numeric",year:"numeric",month:"short"}))),s.createElement("div",{className:"preview"},s.createElement(l.Link,{to:i.ref},s.createElement("span",null,s.createElement(d.ContentRenderer,{content:i.preview}),"Â»"))),e<this.data.recentPosts.length-1&&s.createElement("hr",null))))}}}).call(this,t(20)(i))},98:function(i,e,t){i.exports.data={baseData:{index:new(t(15).RuntimeRouteRef)([],()=>Promise.resolve().then(t.t.bind(null,87,7)).then(i=>i.page))},recentPosts:[{title:"How to Stress the C# Compiler",date:"Fri Oct 04 2019 12:00:00 GMT+0200 (GMT+02:00)",preview:{kind:"list",items:[{kind:"list",items:[]},{kind:"list",items:[{kind:"text",value:"C# is (mostly) a strongly typed programming language. It's type system supports generics, inference, and method overloading. Combining these features, any C# compiler can easily be knocked out. This blog article demonstrates a few approaches. One of them knocks out the programmer more than the compiler, but that's not so important."}]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]}]},ref:new(t(15).RuntimeRouteRef)(["post","how-to-stress-the-csharp-compiler"],()=>t.e(4).then(t.t.bind(null,94,7)).then(i=>i.page))},{title:"Hot Reload for VS Code Extension Development",date:"Tue Sep 10 2019 02:00:00 GMT+0200 (GMT+02:00)",preview:{kind:"list",items:[{kind:"list",items:[]},{kind:"list",items:[{kind:"badge",text:"Image"}]},{kind:"list",items:[{kind:"text",value:"Ever wanted to iteratively tweak your VS Code extension but got annoyed on how long it takes to try things out? Then check out "},{kind:"inlineCode",code:"@hediet/node-reload"},{kind:"text",value:" to immediately apply your code changes to your running extension and speed up your development workflow!"}]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]}]},ref:new(t(15).RuntimeRouteRef)(["post","hot_reload_for_vs_code_extension_development"],()=>t.e(14).then(t.t.bind(null,91,7)).then(i=>i.page))},{title:"A TypeScript Playground for RX JS",date:"Sun Sep 08 2019 12:00:00 GMT+0200 (GMT+02:00)",preview:{kind:"text",value:"This post is a playground for\n        RxJS, a library for reactive programming using Observables that\n        make it easier to compose asynchronous or callback-based\n        code. The playground supports editable as well as\n        computed observables. Events of editable observables can\n        be created with a single click and dragged around, while\n        computed observables are expressed in type-checked\n        JavaScript (also known as TypeScript) and can refer to\n        other observables."},ref:new(t(15).RuntimeRouteRef)(["post","a_typescript_playground_for_rx_js"],()=>t.e(3).then(t.t.bind(null,95,7)).then(i=>i.page))},{title:"Implementing TypeScript Refactorings With Hot Reloading",date:"Sat Sep 07 2019 14:00:00 GMT+0200 (GMT+02:00)",preview:{kind:"list",items:[{kind:"list",items:[]},{kind:"list",items:[{kind:"text",value:"This post is about how to implement a simple refactoring for TypesScript as a language service plugin that can be used in VS Code. It showcases modern development techniques like hot reloading, test driven development and syntax tree visualizations in VS Code."}]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]}]},ref:new(t(15).RuntimeRouteRef)(["post","implementing_typescript_refactorings_with_hot_reloading"],()=>t.e(2).then(t.t.bind(null,96,7)).then(i=>i.page))},{title:"The Disposable Pattern in TypeScript",date:"Sat Sep 07 2019 12:00:00 GMT+0200 (GMT+02:00)",preview:{kind:"list",items:[{kind:"list",items:[]},{kind:"list",items:[{kind:"text",value:"JavaScript and TypeScript developers are used to implement life cycles and side effects imperatively. Examples are "},{kind:"inlineCode",code:"setInterval"},{kind:"text",value:"/"},{kind:"inlineCode",code:"clearInterval"},{kind:"text",value:" for starting and stopping a timer and "},{kind:"inlineCode",code:"addEventListener"},{kind:"text",value:"/"},{kind:"inlineCode",code:"removeEventListener"},{kind:"text",value:" for adding and removing an event listener. The JavaScript browser API has much more such examples."}]},{kind:"list",items:[{kind:"text",value:"This principle is adopted for own code too, which often results in something similar to this:"}]},{kind:"badge",text:"Code"},{kind:"list",items:[{kind:"text",value:"This"}]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]}]},ref:new(t(15).RuntimeRouteRef)(["post","the_disposable_pattern_in_typescript"],()=>t.e(18).then(t.t.bind(null,92,7)).then(i=>i.page))},{title:"Hello World",date:"Sat Sep 07 2019 10:00:00 GMT+0200 (GMT+02:00)",preview:{kind:"list",items:[{kind:"list",items:[]},{kind:"list",items:[{kind:"text",value:"After some long nights I finally published my very own blog! I will mainly use this blog to write about TypeScript, my own projects and other cool programming related stuff."}]},{kind:"list",items:[{kind:"text",value:"The blog is a static website that uses TypeScript, React, MobX and much more other cool technology. For compiling the blog, I use webpack and dynamically provide each page as a (virtual) module acting as an entry point. Each such"},{kind:"list",items:[]},{kind:"list",items:[]}]},{kind:"list",items:[]},{kind:"list",items:[]},{kind:"list",items:[]}]},ref:new(t(15).RuntimeRouteRef)(["post","hello_world"],()=>t.e(17).then(t.t.bind(null,93,7)).then(i=>i.page))}],routeIndexProvider:new(t(15).DynamicRouteIndexProvider)(()=>t.e(0).then(t.t.bind(null,88,7)))}}}]);