(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{104:function(n,s,a){n.exports.data={baseData:{index:new(a(15).RuntimeRouteRef)([],()=>a.e(1).then(a.t.bind(null,87,7)).then(n=>n.page))},post:{title:"How to Stress the C# Compiler",content:{kind:"list",items:[{kind:"list",items:[]},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"C# is (mostly) a strongly typed programming language.\nIt's type system supports generics, inference, and method overloading.\nCombining these features, any C# compiler can easily be knocked out.\nThis blog article demonstrates a few approaches.\nOne of them knocks out the programmer more than the compiler, but that's not so important."}]}},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"C# is NP-hard"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"Deciding whether a C# program is valid, i.e. parses and type-checks without errors, is NP-hard.\nThe still unsolved Pâ‰ NP conjecture implies that there is no algorithm than can solve any NP-hard problem in polynomial time!\nThis means that there are relatively short programs that will keep any C# compiler busy for quite a while, assuming the compiler correctly type-checks the program."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"To prove that C# is NP-hard, it is sufficient to show that the type-checker can be used to check whether a given boolean 3-SAT formula is satisfiable.\nA 3-SAT formula is a conjunction ("},{kind:"inlineCode",code:"&&"},{kind:"text",value:") of disjunctions ("},{kind:"inlineCode",code:"||"},{kind:"text",value:") so that\neach disjunction consists of at most three literals whereas\neach literal is either a variable ("},{kind:"inlineCode",code:"x"},{kind:"text",value:") or a negated variable ("},{kind:"inlineCode",code:"!x"},{kind:"text",value:")."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"The idea of this reduction is not hard to understand, so let's dive straight into the annotated code for an exemplary formula.\nYou can find the full code "},{kind:"link",body:{kind:"list",items:[{kind:"text",value:"here"}]},url:"https://github.com/hediet/blog/blob/d85bf8950a3468fe9fb2e4b2e67388c352d9410c/content/posts/2019/10/how-to-stress-the-csharp-compiler/csharp-demo1.cs"},{kind:"text",value:"."}]}},{kind:"code",html:'using System<span class="token punctuation">;</span>\n\n<span class="token comment">// These two classes will represent the two states of a boolean variable.</span>\n<span class="token keyword">class</span> <span class="token class-name">True</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">False</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Program</span> <span class="token punctuation">{</span>\n    <span class="token comment">// The `Or` method can only be called if one of its arguments is of type True.</span>\n    <span class="token comment">// `Or(new False(), new False())` won\'t be accepted by the type-checker,</span>\n    <span class="token comment">// while `Or(new True(), new False())` and `Or(new False(), new True())` are.</span>\n    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Or</span><span class="token punctuation">(</span><span class="token parameter">True a<span class="token punctuation">,</span> object b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Or</span><span class="token punctuation">(</span><span class="token parameter">False a<span class="token punctuation">,</span> True b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token comment">// Not just inverts the argument.</span>\n    <span class="token keyword">static</span> True <span class="token function">Not</span><span class="token punctuation">(</span><span class="token parameter">False a</span><span class="token punctuation">)</span>  <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">True</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">static</span> False <span class="token function">Not</span><span class="token punctuation">(</span><span class="token parameter">True a</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">False</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"At this point, we can express boolean statements which are typechecked if and only if they are true.\nFor boolean 3-SAT formulas, however, we need variables.\nAs it turns out, we can easily bring variables into existence by using C#'s lambdas.\nUsing overloads, we can then let the compiler decide whether the variable should be of type "},{kind:"inlineCode",code:"True"},{kind:"text",value:" or "},{kind:"inlineCode",code:"False"},{kind:"text",value:"."}]}},{kind:"code",html:'    <span class="token comment">// Var introduces a variable whose type can be True or False,</span>\n    <span class="token comment">// depending on which overload the compiler choses.</span>\n    <span class="token keyword">static</span> object <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">Func<span class="token operator">&lt;</span>True<span class="token punctuation">,</span> object<span class="token operator">></span> f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">static</span> object <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">Func<span class="token operator">&lt;</span>False<span class="token punctuation">,</span> object<span class="token operator">></span> f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">;</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"This is everything we need!\nThe following code states that 3 pigeons fit into 2 pigeon holes.\nThis is obviously false, thus the type-checker will complain that "},{kind:"inlineCode",code:"False"},{kind:"text",value:" cannot be assigned to "},{kind:"inlineCode",code:"True"},{kind:"text",value:".\nEven though this is a 2-SAT formula, 3-SAT formulas are expressed analogous, by simply adjusting "},{kind:"inlineCode",code:"Or"},{kind:"text",value:" to accept three arguments."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"First we spawn several variables that the type-checker can chose to be "},{kind:"inlineCode",code:"True"},{kind:"text",value:" or "},{kind:"inlineCode",code:"False"},{kind:"text",value:",\nthen we constrain these variables to our problem."}]}},{kind:"code",html:'    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Pigeon 1 can be in hole 1 or 2.</span>\n        <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">p1_in_h1</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">p1_in_h2</span> <span class="token operator">=></span>\n        <span class="token comment">// Pigeon 2 can be in hole 1 or 2.</span>\n        <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">p2_in_h1</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">p2_in_h2</span> <span class="token operator">=></span>\n        <span class="token comment">// Pigeon 3 can be in hole 1 or 2.</span>\n        <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">p3_in_h1</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">p3_in_h2</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token comment">// Every pigeon is in at least one hole.</span>\n            <span class="token function">Or</span><span class="token punctuation">(</span>p1_in_h1<span class="token punctuation">,</span> p1_in_h2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">Or</span><span class="token punctuation">(</span>p2_in_h1<span class="token punctuation">,</span> p2_in_h2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">Or</span><span class="token punctuation">(</span>p3_in_h1<span class="token punctuation">,</span> p3_in_h2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// No two pigeons are in hole 1.</span>\n            <span class="token function">Or</span><span class="token punctuation">(</span><span class="token function">Not</span><span class="token punctuation">(</span>p1_in_h1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Not</span><span class="token punctuation">(</span>p2_in_h1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">Or</span><span class="token punctuation">(</span><span class="token function">Not</span><span class="token punctuation">(</span>p1_in_h1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Not</span><span class="token punctuation">(</span>p3_in_h1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">Or</span><span class="token punctuation">(</span><span class="token function">Not</span><span class="token punctuation">(</span>p2_in_h1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Not</span><span class="token punctuation">(</span>p3_in_h1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// No two pigeons are in hole 2.</span>\n            <span class="token function">Or</span><span class="token punctuation">(</span><span class="token function">Not</span><span class="token punctuation">(</span>p1_in_h2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Not</span><span class="token punctuation">(</span>p2_in_h2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">Or</span><span class="token punctuation">(</span><span class="token function">Not</span><span class="token punctuation">(</span>p1_in_h2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Not</span><span class="token punctuation">(</span>p3_in_h2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">Or</span><span class="token punctuation">(</span><span class="token function">Not</span><span class="token punctuation">(</span>p2_in_h2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Not</span><span class="token punctuation">(</span>p3_in_h2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"If the compiler can chose overloads of "},{kind:"inlineCode",code:"Var"},{kind:"text",value:" so that\nthe entire body type-checks, the boolean formula is satisfiable and there is also only one unique variable assignment.\nThe concrete chosen overloads reveal how to assign the variables so that the formula becomes true.\nIf there are multiple variable assignments that satisfy the formula, the type-checker will complain that the overload is ambigue."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"As this reduction works for all 3-SAT instances, we showed that C# and in particular type-checking is NP-hard!\nPâ‰ NP now promises that there are C# programs causing an exponential runtime of the type-checker.\nAs it turns out, the Microsoft C# compiler "},{kind:"emphasis",body:{kind:"list",items:[{kind:"text",value:"Roslyn"}]}},{kind:"text",value:" is just brute forcing every possible overload,\nso this simple code is already sufficient to cause an eternal compile time:"}]}},{kind:"code",html:'<span class="token keyword">class</span> <span class="token class-name">True</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">False</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Program</span> <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x1</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x2</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x3</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x4</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x5</span> <span class="token operator">=></span>\n            <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x6</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x7</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x8</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x9</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x10</span> <span class="token operator">=></span>\n                <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x11</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x12</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x13</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x14</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x15</span> <span class="token operator">=></span>\n                    <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x16</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x17</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x18</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x19</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x20</span> <span class="token operator">=></span>\n                        <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x21</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x22</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x23</span> <span class="token operator">=></span> <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">x24</span> <span class="token operator">=></span>\n                            <span class="token keyword">null</span>\n                        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">static</span> object <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">System<span class="token punctuation">.</span>Func<span class="token operator">&lt;</span>True<span class="token punctuation">,</span> object<span class="token operator">></span> f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">static</span> object <span class="token function">Var</span><span class="token punctuation">(</span><span class="token parameter">System<span class="token punctuation">.</span>Func<span class="token operator">&lt;</span>False<span class="token punctuation">,</span> object<span class="token operator">></span> f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"It might seem simple to drastically improve Roslyn's compile time on this example,\nbut regardless of what clever optimizations are added to Roslyn's overload resolution algorithm,\nif Pâ‰ NP, there are always examples that cause an exponential runtime of the type-checker!"}]}},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"With C# One Can Prove that a Turing Machine Halts"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"C# generics are always fun to play with. They provide a very constrained macro system\nthat allows to describe rules that expand and, using extension methods, collapse types.\nTogether, they can be used to derive words from context sensitive grammars step by step."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"As the execution of a turing machine on an empty tape can be encoded as a derivation of a context sensitive grammar,\nit is no wonder that we can design an API in C# that can only be called when the user proves that the given turing machine halts.\nThis, however, merely stresses the compiler but much more the programmar. We will see later how we can use that against the compiler!\nIt also shows that it is undecidable whether a given C# interface can be implemented type-safely (ignoring "},{kind:"inlineCode",code:"null"},{kind:"text",value:" values and explicit type casts)!\nThis is undecidable, even though the only requirement is a type-safe but otherwise arbitrary implementation!"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"If you forgot what turing machines are, you can find a\n"},{kind:"link",body:{kind:"list",items:[{kind:"text",value:"refresher here"}]},url:"https://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/turing-machine/one.html"},{kind:"text",value:"\nand a really nice "},{kind:"link",body:{kind:"list",items:[{kind:"text",value:"playground here"}]},url:"http://turingmachine.io/"},{kind:"text",value:"."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"Lets have a look at how turing machines can be encoded in C#. You can find the full code "},{kind:"link",body:{kind:"list",items:[{kind:"text",value:"here"}]},url:"https://github.com/hediet/blog/blob/d85bf8950a3468fe9fb2e4b2e67388c352d9410c/content/posts/2019/10/how-to-stress-the-csharp-compiler/csharp-demo3.cs"},{kind:"text",value:"."}]}},{kind:"code",html:'using Internal<span class="token punctuation">;</span>\n\n<span class="token comment">// This namespace is meant to be within its own assembly</span>\n<span class="token comment">// so that users cannot use non-public members of it (hence the name).</span>\nnamespace Internal <span class="token punctuation">{</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"The following class represents a stack. Two stacks make up the tape of a turing machine.\n"},{kind:"inlineCode",code:"TSymbol"},{kind:"text",value:" is the top most symbol, "},{kind:"inlineCode",code:"TRestStack"},{kind:"text",value:" the stack without "},{kind:"inlineCode",code:"TSymbol"},{kind:"text",value:"."}]}},{kind:"code",html:'    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>TSymbol<span class="token punctuation">,</span> TRestStack<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"In case of turing machines, we need infinitly deep stacks.\n"},{kind:"inlineCode",code:"Sym1"},{kind:"text",value:" is our blank symbol here and\nfills the eternal deepness of our infinitly deep stacks:\nWhenever we encounter an "},{kind:"inlineCode",code:"EmptyStack"},{kind:"text",value:", C# can unfold it to\na stack having "},{kind:"inlineCode",code:"Sym1"},{kind:"text",value:" as topmost symbol and "},{kind:"inlineCode",code:"EmptyStack"},{kind:"text",value:" as the rest."}]}},{kind:"code",html:'    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmptyStack</span> <span class="token punctuation">:</span> Stack<span class="token operator">&lt;</span>Sym1<span class="token punctuation">,</span> EmptyStack<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"inlineCode",code:"Sym1"},{kind:"text",value:" and "},{kind:"inlineCode",code:"Sym2"},{kind:"text",value:" represent the tape alphabet, in this case consisting of two symbols."}]}},{kind:"code",html:'    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sym1</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sym2</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"Now we declare the states of our turing machine.\nLater we want to encode the busy beaver machine with 4 states, so we need 4 of them.\nAn (S, Q)-busy beaver is the turing machine that has the longest\nruntime (but still comes to an halt) when started on an empty tape\namong all turing machines using |S| tape symbols and |Q| states.\nIn case of S={Sym1, Sym2} and Q={State1, State2, State3, State4},\nthe busy beaver will take 107 steps until it halts.\nEvery machine using |S| symbols and |Q| states that\nstill doesn't halt after 107 steps will never do so."}]}},{kind:"code",html:'    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">State1</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">State2</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">State3</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">State4</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token comment">// These classes can only be constructed within this assembly,</span>\n    <span class="token comment">// as their constructor is internal.</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Secret</span> <span class="token punctuation">{</span> internal <span class="token function">Secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>\n    <span class="token comment">// Only the `BusyBeaver4State2Symbols` class below can create the final config.</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalConfig</span> <span class="token punctuation">{</span> internal <span class="token function">FinalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>\n\n    <span class="token comment">// We need this interface to make the configuration covariant in its stack parameters.</span>\n    <span class="token comment">// It allows the compiler to unfold</span>\n    <span class="token comment">// `Config&lt;..., EmptyStack, ...>` to</span>\n    <span class="token comment">// `Config&lt;..., Stack&lt;Sym1, EmptyStack>, ...>`.</span>\n    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IConfig</span><span class="token operator">&lt;</span>TState<span class="token punctuation">,</span> out TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> out TRightStack<span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token comment">// This prevents a user to implement their own config and thus</span>\n        <span class="token comment">// working around the Step semantics of the turing machine defined below.</span>\n        <span class="token comment">// A (non-null) secret can only be instantiated in this assembly.</span>\n        Secret <span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// This class is only visible in this assembly,</span>\n    <span class="token comment">// it represents an arbitrary configuration.</span>\n    <span class="token keyword">class</span> <span class="token class-name">ArbitraryConfig</span><span class="token operator">&lt;</span>TState<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> TRightStack<span class="token operator">></span>\n        <span class="token punctuation">:</span> IConfig<span class="token operator">&lt;</span>TState<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> TRightStack<span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> Secret <span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// This class can be used from the outside but only represents the initial config.</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitialConfig</span> <span class="token punctuation">:</span> IConfig<span class="token operator">&lt;</span>State1<span class="token punctuation">,</span> EmptyStack<span class="token punctuation">,</span> Sym1<span class="token punctuation">,</span> EmptyStack<span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> Secret <span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"There is no other C# interface that is harder to implement than "},{kind:"inlineCode",code:"IChallenge"},{kind:"text",value:":\nIt can only be implemented if there are extension methods that describe a turing machine that halts!\nFiguring out whether a turing machine halts, even on the empty tape, is pretty hard."}]}},{kind:"code",html:'    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IChallenge</span> <span class="token punctuation">{</span>\n        FinalConfig <span class="token function">Run</span><span class="token punctuation">(</span>InitialConfig config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"The extension methods provided by the static class "},{kind:"inlineCode",code:"BusyBeaver4State2Symbols"},{kind:"text",value:" describe the\nstep semantics of the 4-state busy beaver turing machine on a tape with 2 symbols.\nEach method represents a rule that matches against a machine configuration\nand returns the next configuration.\nFor example, if we would like to remove an item from a stack,\nwe match against the type "},{kind:"inlineCode",code:"Stack<TSymbol, TRest>"},{kind:"text",value:" with "},{kind:"inlineCode",code:"TSymbol"},{kind:"text",value:" and "},{kind:"inlineCode",code:"TRest"},{kind:"text",value:"\nbeing arbitrary types that are inferred by the C# type-checker and return "},{kind:"inlineCode",code:"TRest"},{kind:"text",value:"."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"I generated the following rules from a more readable representation of the turing machine.\nYou can find the code of the generator "},{kind:"link",body:{kind:"list",items:[{kind:"text",value:"here"}]},url:"https://github.com/hediet/blog/blob/d85bf8950a3468fe9fb2e4b2e67388c352d9410c/content/posts/2019/10/how-to-stress-the-csharp-compiler/script.ts"},{kind:"text",value:"."}]}},{kind:"code",html:'    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BusyBeaver4State2Symbols</span> <span class="token punctuation">{</span>\n        <span class="token comment">// This is the final step. After reaching this configuration, the turing machine halts.</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> FinalConfig Step<span class="token operator">&lt;</span>TRightStack<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token operator">></span><span class="token punctuation">(</span>\n                 <span class="token keyword">this</span> IConfig<span class="token operator">&lt;</span>State3<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> Sym1<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>TSymbol<span class="token punctuation">,</span> TRightStack<span class="token operator">>></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n        <span class="token comment">// These are all the other rules. Don\'t try to understand the busy beaver rules.</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> IConfig<span class="token operator">&lt;</span>State2<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym2<span class="token punctuation">,</span> TLeftStack<span class="token operator">></span><span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> TRightStack<span class="token operator">></span> Step<span class="token operator">&lt;</span>TRightStack<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token operator">></span><span class="token punctuation">(</span>\n                 <span class="token keyword">this</span> IConfig<span class="token operator">&lt;</span>State1<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> Sym1<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>TSymbol<span class="token punctuation">,</span> TRightStack<span class="token operator">>></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArbitraryConfig</span><span class="token operator">&lt;</span>State2<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym2<span class="token punctuation">,</span> TLeftStack<span class="token operator">></span><span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> TRightStack<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> IConfig<span class="token operator">&lt;</span>State2<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym2<span class="token punctuation">,</span> TRightStack<span class="token operator">>></span> Step<span class="token operator">&lt;</span>TRightStack<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token operator">></span><span class="token punctuation">(</span>\n                 <span class="token keyword">this</span> IConfig<span class="token operator">&lt;</span>State1<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>TSymbol<span class="token punctuation">,</span> TLeftStack<span class="token operator">></span><span class="token punctuation">,</span> Sym2<span class="token punctuation">,</span> TRightStack<span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArbitraryConfig</span><span class="token operator">&lt;</span>State2<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym2<span class="token punctuation">,</span> TRightStack<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> IConfig<span class="token operator">&lt;</span>State1<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym2<span class="token punctuation">,</span> TRightStack<span class="token operator">>></span> Step<span class="token operator">&lt;</span>TRightStack<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token operator">></span><span class="token punctuation">(</span>\n                 <span class="token keyword">this</span> IConfig<span class="token operator">&lt;</span>State2<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>TSymbol<span class="token punctuation">,</span> TLeftStack<span class="token operator">></span><span class="token punctuation">,</span> Sym1<span class="token punctuation">,</span> TRightStack<span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArbitraryConfig</span><span class="token operator">&lt;</span>State1<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym2<span class="token punctuation">,</span> TRightStack<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> IConfig<span class="token operator">&lt;</span>State3<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym1<span class="token punctuation">,</span> TRightStack<span class="token operator">>></span> Step<span class="token operator">&lt;</span>TRightStack<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token operator">></span><span class="token punctuation">(</span>\n                 <span class="token keyword">this</span> IConfig<span class="token operator">&lt;</span>State2<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>TSymbol<span class="token punctuation">,</span> TLeftStack<span class="token operator">></span><span class="token punctuation">,</span> Sym2<span class="token punctuation">,</span> TRightStack<span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArbitraryConfig</span><span class="token operator">&lt;</span>State3<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym1<span class="token punctuation">,</span> TRightStack<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> IConfig<span class="token operator">&lt;</span>State4<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym2<span class="token punctuation">,</span> TRightStack<span class="token operator">>></span> Step<span class="token operator">&lt;</span>TRightStack<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token operator">></span><span class="token punctuation">(</span>\n                 <span class="token keyword">this</span> IConfig<span class="token operator">&lt;</span>State3<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>TSymbol<span class="token punctuation">,</span> TLeftStack<span class="token operator">></span><span class="token punctuation">,</span> Sym2<span class="token punctuation">,</span> TRightStack<span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArbitraryConfig</span><span class="token operator">&lt;</span>State4<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym2<span class="token punctuation">,</span> TRightStack<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> IConfig<span class="token operator">&lt;</span>State4<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym2<span class="token punctuation">,</span> TLeftStack<span class="token operator">></span><span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> TRightStack<span class="token operator">></span> Step<span class="token operator">&lt;</span>TRightStack<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token operator">></span><span class="token punctuation">(</span>\n                 <span class="token keyword">this</span> IConfig<span class="token operator">&lt;</span>State4<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> Sym1<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>TSymbol<span class="token punctuation">,</span> TRightStack<span class="token operator">>></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArbitraryConfig</span><span class="token operator">&lt;</span>State4<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym2<span class="token punctuation">,</span> TLeftStack<span class="token operator">></span><span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> TRightStack<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> IConfig<span class="token operator">&lt;</span>State1<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym1<span class="token punctuation">,</span> TLeftStack<span class="token operator">></span><span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> TRightStack<span class="token operator">></span> Step<span class="token operator">&lt;</span>TRightStack<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> TSymbol<span class="token operator">></span><span class="token punctuation">(</span>\n                 <span class="token keyword">this</span> IConfig<span class="token operator">&lt;</span>State4<span class="token punctuation">,</span> TLeftStack<span class="token punctuation">,</span> Sym2<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>TSymbol<span class="token punctuation">,</span> TRightStack<span class="token operator">>></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArbitraryConfig</span><span class="token operator">&lt;</span>State1<span class="token punctuation">,</span> Stack<span class="token operator">&lt;</span>Sym1<span class="token punctuation">,</span> TLeftStack<span class="token operator">></span><span class="token punctuation">,</span> TSymbol<span class="token punctuation">,</span> TRightStack<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"And here it is: The proof that the busy beaver halts!"}]}},{kind:"code",html:'<span class="token keyword">class</span> <span class="token class-name">Program</span> <span class="token punctuation">:</span> IChallenge <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        FinalConfig f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InitialConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> FinalConfig <span class="token function">Run</span><span class="token punctuation">(</span><span class="token parameter">InitialConfig c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// The Busy Beaver TM with 4 states and 2 symbols takes 107 steps to halt.</span>\n        <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"Admittedly, just repeating "},{kind:"inlineCode",code:".Step()"},{kind:"text",value:" until the turing machine halts does not sound that hard - until it doesn't halt, then you never now when to stop!"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"However, if you still want to make it more challenging to use your API, you can\nencode a non-deterministic turing machine that only halts when chosing the right steps.\nRather than having a single "},{kind:"inlineCode",code:"Step"},{kind:"text",value:" method, you would have a method for every non-deterministic transition.\nThis is NP-hard by definition!"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"Note that this construction does not show that C#'s type system is turing complete!\nIt would be turing complete though, if, given a program P, "},{kind:"inlineCode",code:"P: string = a + b + c"},{kind:"text",value:",\nthe type-checker had to decide whether a "},{kind:"inlineCode",code:"k: int"},{kind:"text",value:" exists such that "},{kind:"inlineCode",code:"P' := a + b^k + c"},{kind:"text",value:" is type correct.\nWithout turing completeness, this idea cannot be used to force the compiler into an infinite loop."}]}},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"Generic type instantiations can grow exponentially fast"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"But we can also use generics to instantiate a very, very large type without much code:"}]}},{kind:"code",html:'using System<span class="token punctuation">;</span>\n\n<span class="token comment">// The type of `f` is two times larger than the type of Foo&lt;T1, T2>.</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">public</span> Foo<span class="token operator">&lt;</span>Foo<span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token operator">></span><span class="token punctuation">,</span> Foo<span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token operator">>></span> f<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Program</span> <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// The type of `x` is very large.</span>\n        <span class="token keyword">var</span> x <span class="token operator">=</span> f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f\n               <span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f\n               <span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f\n               <span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f\n               <span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f\n               <span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f\n               <span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">.</span>f<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"This will crash the C# compiler due to memory limitations.\nHowever, if Roslyn would share type instantiations and not copy them for every instantiation\n(at least I guess this is what Roslyn is doing),\nthe last example could be checked in linear time."}]}},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"A Parser that does Backtracking?"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"I couldn't figure out how to crash Roslyn with this one, but maybe you can.\nGiven this piece of code, what would you expect from the compiler?"}]}},{kind:"code",html:'<span class="token keyword">class</span> <span class="token class-name">Program</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        int f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> int x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> int y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>\n            <span class="token string">"{0} {1}"</span><span class="token punctuation">,</span>\n            f <span class="token operator">&lt;</span> x<span class="token punctuation">,</span> <span class="token comment">// is f smaller than x?</span>\n            y <span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// is y greater than 1?</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"The type-checker will reject it, since "},{kind:"inlineCode",code:"x"},{kind:"text",value:" and "},{kind:"inlineCode",code:"y"},{kind:"text",value:" are used as types, but they aren't!"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"If the code is formatted differently, the problem becomes clear:"}]}},{kind:"code",html:'<span class="token keyword">class</span> <span class="token class-name">x</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">y</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Program</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> int f<span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token punctuation">,</span> <span class="token constant">T2</span><span class="token operator">></span><span class="token punctuation">(</span>int i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>\n            <span class="token string">"{0}"</span><span class="token punctuation">,</span>\n            f<span class="token operator">&lt;</span>x<span class="token punctuation">,</span> y<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',lang:"cs"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"When designing a parser, you don't want to use type information for deciding how to interpret a piece of code,\nas you need a parser to compute the type information in the first place (even though C requires it's compilers to do so).\nHowever, in this case, "},{kind:"inlineCode",code:"f<x, y>(1)"},{kind:"text",value:" can both be a generic method call or two arithmetic comparisons, passed as arguments to "},{kind:"inlineCode",code:"WriteLine"},{kind:"text",value:"."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"I guess, Roslyn just gives generic method calls precendence and that their parser uses backtracking:\nWhenever an expression is expected, the parser first tries to parse the expression as method call and only if that fails it reparses it as arithmetic expression.\nI wonder whether this backtracking can be exploited to force the parser into an exponential runtime!\nAny ideas?"}]}},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"Outlook"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"C#'s type system can do surprisingly much, even though, when compared to "},{kind:"link",body:{kind:"list",items:[{kind:"text",value:"TypeScript's turing complete type system"}]},url:"https://github.com/Microsoft/TypeScript/issues/14833"},{kind:"text",value:", it is quite conservative. But still, C#'s type system is sound while TypeScript's isn't!"}]}}]},date:"Fri Oct 04 2019 12:00:00 GMT+0200 (GMT+02:00)",github:void 0},routeIndexProvider:new(a(15).DynamicRouteIndexProvider)(()=>a.e(0).then(a.t.bind(null,88,7)))}},82:function(n,s,a){"use strict";function t(n){for(var a in n)s.hasOwnProperty(a)||(s[a]=n[a])}Object.defineProperty(s,"__esModule",{value:!0}),t(a(41)),t(a(42)),t(a(83)),t(a(84))},83:function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});const t=a(0);s.BlogDate=function(n){return t.createElement("div",{className:"component-BlogDate"},new Date(n.date).toLocaleDateString("en-US",{day:"numeric",year:"numeric",month:"short"}))}},84:function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});const t=a(0);s.GithubBadge=function(n){const s=`github.com/${n.org}/${n.repo}`;return t.createElement("a",{href:`https://github.com/${n.org}/${n.repo}`},t.createElement("img",{alt:"github repo",style:{border:"none"},src:`https://img.shields.io/badge/repo-${encodeURI(s).replace(/-/g,"--")}-informational.svg`}))}},86:function(n,s,a){"use strict";(function(n){Object.defineProperty(s,"__esModule",{value:!0});const t=a(0),p=a(82),o=a(85);s.BlogPage=class extends o.BasePage{constructor(){super(...arguments),this.module=n}get title(){return this.data.post.title}render(){const n=this.data.post;return t.createElement(p.PageFrame,Object.assign({},this.data.baseData),t.createElement("h1",null,n.title),t.createElement("div",{className:"badges",style:{display:"flex"}},t.createElement(p.BlogDate,{date:new Date(n.date)}),n.github&&t.createElement("div",{style:{marginLeft:"auto"}},t.createElement(p.GithubBadge,{org:n.github.org,repo:n.github.repo}))),t.createElement(p.ContentRenderer,{content:n.content}))}}}).call(this,a(20)(n))},94:function(n,s,a){const t=a(86),p=a(104).data,o=new t.BlogPage(p);n.exports.page=o}}]);