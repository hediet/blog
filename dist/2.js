(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{106:function(n,s,a){n.exports.data={baseData:{index:new(a(15).RuntimeRouteRef)([],()=>a.e(1).then(a.t.bind(null,86,7)).then(n=>n.page))},post:{title:"Implementing TypeScript Refactorings With Hot Reloading",content:{kind:"list",items:[{kind:"list",items:[]},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"This post is about how to implement a simple refactoring for TypesScript as a language service plugin that can be used in VS Code.\nIt showcases modern development techniques like hot reloading, test driven development and syntax tree visualizations in VS Code."}]}},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"Goal"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"When I want to pass a textual message to a function, I often start with a simple string literal enquoted in "},{kind:"inlineCode",code:'"'},{kind:"text",value:" but then notice that I want to include non-static variables.\nHowever, rather than just concatenating the various string parts, I prefer to use string templates for that.\nThe goal of this post is to implement a refactoring that can convert from manually concatenated strings to string templates:"}]}},{kind:"code",html:'<span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// After applying "Convert to template string":</span>\n<span class="token function">format</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>',lang:"ts"},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"Figuring out how to write a Language Service Plugin"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"I used "},{kind:"text",value:"not supported"},{kind:"text",value:" as a starting point for a language service plugin.\nWith the help of autocompletion, I soon spotted "},{kind:"inlineCode",code:"getApplicableRefactors"},{kind:"text",value:" and "},{kind:"inlineCode",code:"getEditsForRefactor"},{kind:"text",value:" as the two functions of the language service to decorate for custom refactorings."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"By using "},{kind:"inlineCode",code:"getProgram"},{kind:"text",value:" of the underlying lanugage service, the plugin can access the current syntax tree and the type checker."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"I ended with the following project structure:"}]}},{kind:"code",html:'<span class="token comment">// src/index.ts: Entry point of the plugin, automatically loaded by the language server.</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ts <span class="token keyword">from</span> <span class="token string">"typescript/lib/tsserverlibrary"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createDecoratedLanguageService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./createDecoratedLanguageService"</span><span class="token punctuation">;</span>\n\n<span class="token function-variable function">export</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">modules<span class="token punctuation">:</span> <span class="token punctuation">{</span> typescript<span class="token punctuation">:</span> <span class="token keyword">typeof</span> ts <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Is called by the TypeScript language server to get the decorated language service.</span>\n        <span class="token function">create</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>server<span class="token punctuation">.</span>PluginCreateInfo<span class="token punctuation">)</span><span class="token punctuation">:</span> ts<span class="token punctuation">.</span>LanguageService <span class="token punctuation">{</span>\n            <span class="token comment">// At runtime, use `modules.typescript` rather than importing "typescript".</span>\n            <span class="token comment">// This avoids version conflicts, in particular when new AST kinds are added.</span>\n            <span class="token comment">// Types however still must be imported from "typescript".</span>\n            <span class="token keyword">return</span> <span class="token function">createLanguageServiceWithRefactorings</span><span class="token punctuation">(</span>\n                modules<span class="token punctuation">.</span>typescript<span class="token punctuation">,</span>\n                info<span class="token punctuation">.</span>languageService<span class="token punctuation">,</span>\n                info<span class="token punctuation">.</span>project<span class="token punctuation">.</span>projectService\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>',lang:"ts"},{kind:"code",html:'<span class="token comment">// src/createLanguageServiceWithRefactorings.ts</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ts <span class="token keyword">from</span> <span class="token string">"typescript"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createLanguageServiceWithRefactorings</span><span class="token punctuation">(</span>\n    <span class="token parameter">typescript<span class="token punctuation">:</span> <span class="token keyword">typeof</span> ts<span class="token punctuation">,</span>\n    base<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>LanguageService</span>\n<span class="token punctuation">)</span><span class="token punctuation">:</span> ts<span class="token punctuation">.</span>LanguageService <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>base<span class="token punctuation">,</span>\n\n        <span class="token function-variable function">getApplicableRefactors</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">fileName<span class="token punctuation">,</span> positionOrRange<span class="token punctuation">,</span> preferences</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> existing <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">getApplicableRefactors</span><span class="token punctuation">(</span>\n                fileName<span class="token punctuation">,</span>\n                positionOrRange<span class="token punctuation">,</span>\n                preferences\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> refactorings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> program <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">getProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// TODO</span>\n\n            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>refactorings<span class="token punctuation">,</span> <span class="token operator">...</span>existing<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n        getEditsForRefactor<span class="token punctuation">:</span> <span class="token punctuation">(</span>\n            fileName<span class="token punctuation">:</span> string<span class="token punctuation">,</span>\n            formatOptions<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>FormatCodeSettings<span class="token punctuation">,</span>\n            positionOrRange<span class="token punctuation">:</span> number <span class="token operator">|</span> ts<span class="token punctuation">.</span>TextRange<span class="token punctuation">,</span>\n            refactorName<span class="token punctuation">:</span> string<span class="token punctuation">,</span>\n            actionName<span class="token punctuation">:</span> string<span class="token punctuation">,</span>\n            preferences<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>UserPreferences <span class="token operator">|</span> <span class="token keyword">undefined</span>\n        <span class="token punctuation">)</span><span class="token punctuation">:</span> ts<span class="token punctuation">.</span>RefactorEditInfo <span class="token operator">|</span> <span class="token parameter"><span class="token keyword">undefined</span></span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> e <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">getEditsForRefactor</span><span class="token punctuation">(</span>\n                fileName<span class="token punctuation">,</span>\n                formatOptions<span class="token punctuation">,</span>\n                positionOrRange<span class="token punctuation">,</span>\n                refactorName<span class="token punctuation">,</span>\n                actionName<span class="token punctuation">,</span>\n                preferences\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> e<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">const</span> program <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">getProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// TODO</span>\n\n            <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>',lang:"ts"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"And finally the file where the actual refactor logic should be implemented:"}]}},{kind:"code",html:'<span class="token comment">// src/ConvertToStringTemplateRefactoring.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ConvertToStringTemplateRefactoring</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> readonly refactoringName <span class="token operator">=</span> <span class="token string">"@hediet/ts-refactoring-lsp"</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> readonly convertToStringTemplate <span class="token operator">=</span> <span class="token string">"convertToStringTemplate"</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// TODO</span>\n<span class="token punctuation">}</span>',lang:"ts"},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"Setting up Test and Debugging Environments"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"When programming against a very large and not very well documented API such as TypeScripts compiler API,\nit is important to be able to test things quickly. Besides, it is very useful to have an easy way to attach a debugger.\nI can recommend using Mocha and the Mocha Test Explorer for VS Code, which allows to run and debug arbitrary tests with a single click."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"For testing, we need to mock a language service host, so we can easily define virtual TypeScript files.\nWe also want to have a way to specifiy markers in our virtual files\nso we don't have to compute positions where to apply the refactoring by ourselves.\nThis can be implemented in a way so that the actual tests can be expressed like this:"}]}},{kind:"code",html:'<span class="token comment">// test/main.test.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n    testSingleFileLanguageService<span class="token punctuation">,</span>\n    expectRefactoring<span class="token punctuation">,</span>\n    expectNoRefactoring\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./utils"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ConvertToStringTemplateRefactoring <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../src/ConvertToStringTemplateRefactoring"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createLanguageServiceWithRefactorings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../src/createLanguageServiceWithRefactorings"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ts <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"typescript/lib/tsserverlibrary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"convertStringConcatenationToStringTemplate"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>\n        refactoringName<span class="token punctuation">:</span> ConvertToStringTemplateRefactoring<span class="token punctuation">.</span>refactoringName<span class="token punctuation">,</span>\n        actionName<span class="token punctuation">:</span> ConvertToStringTemplateRefactoring<span class="token punctuation">.</span>convertToStringTemplate\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">decorateWithRefactorings</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">base<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>LanguageService</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n        <span class="token function">createLanguageServiceWithRefactorings</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"Expect Refactoring"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token comment">// "|" is used as marker for where to trigger the refactoring.</span>\n        <span class="token comment">// `testSingleFileLanguageService` calls mocha\'s `it` with the program as name.</span>\n        <span class="token function">testSingleFileLanguageService</span><span class="token punctuation">(</span>\n            <span class="token template-string"><span class="token string">`const str = "|hello";`</span></span><span class="token punctuation">,</span>\n            decorateWithRefactorings<span class="token punctuation">,</span>\n            <span class="token function">expectRefactoring</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token string">"const str = `hello`;"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">testSingleFileLanguageService</span><span class="token punctuation">(</span>\n            <span class="token template-string"><span class="token string">`const str = ("hello" |+ i) + 1;`</span></span><span class="token punctuation">,</span>\n            decorateWithRefactorings<span class="token punctuation">,</span>\n            <span class="token function">expectRefactoring</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token string">"const str = `hello${i}${1}`;"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"Expect No Refactoring"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">testSingleFileLanguageService</span><span class="token punctuation">(</span>\n            <span class="token template-string"><span class="token string">`const str = "test";|`</span></span><span class="token punctuation">,</span>\n            decorateWithRefactorings<span class="token punctuation">,</span>\n            <span class="token function">expectNoRefactoring</span><span class="token punctuation">(</span>refactoringName<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">testSingleFileLanguageService</span><span class="token punctuation">(</span>\n            <span class="token template-string"><span class="token string">`const str = (1 + "hello" |+ i) + 1;`</span></span><span class="token punctuation">,</span>\n            decorateWithRefactorings<span class="token punctuation">,</span>\n            <span class="token function">expectNoRefactoring</span><span class="token punctuation">(</span>refactoringName<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',lang:"ts"},{kind:"paragraph",body:{kind:"list",items:[{kind:"inlineCode",code:"testSingleFileLanguageService"},{kind:"text",value:" is implemented as follows:"}]}},{kind:"code",html:'<span class="token comment">// test/utils.ts</span>\n<span class="token comment">// ...</span>\ntype <span class="token function-variable function">TestFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n    <span class="token parameter">service<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>LanguageService<span class="token punctuation">,</span>\n    markers<span class="token punctuation">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    mainFile<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> string<span class="token punctuation">;</span> content<span class="token punctuation">:</span> string <span class="token punctuation">}</span></span>\n<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * Describes a test for a given content with markers.\n * Prepares services and calles `testFn` to do the actual testing.\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">testSingleFileLanguageService</span><span class="token punctuation">(</span>\n    content<span class="token punctuation">:</span> string<span class="token punctuation">,</span>\n    <span class="token function-variable function">decorator</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">base<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>LanguageService</span><span class="token punctuation">)</span> <span class="token operator">=></span> ts<span class="token punctuation">.</span>LanguageService<span class="token punctuation">,</span>\n    testFn<span class="token punctuation">:</span> TestFn\n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token function">it</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token function">stripMarkers</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> mainFile <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"main.ts"</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> main<span class="token punctuation">.</span>stripped <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n            <span class="token punctuation">[</span>mainFile<span class="token punctuation">.</span>name<span class="token punctuation">,</span> mainFile<span class="token punctuation">.</span>content<span class="token punctuation">]</span>\n        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> serviceHost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockLanguageServiceHost</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> baseService <span class="token operator">=</span> ts<span class="token punctuation">.</span><span class="token function">createLanguageService</span><span class="token punctuation">(</span>\n            serviceHost<span class="token punctuation">,</span>\n            ts<span class="token punctuation">.</span><span class="token function">createDocumentRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> decoratedService <span class="token operator">=</span> <span class="token function">decorator</span><span class="token punctuation">(</span>baseService<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">testFn</span><span class="token punctuation">(</span>decoratedService<span class="token punctuation">,</span> main<span class="token punctuation">.</span>markers<span class="token punctuation">,</span> mainFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// ...</span>',lang:"ts"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"See "},{kind:"text",value:"not supported"},{kind:"text",value:" for the remaining implementations."}]}},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"Abstractions"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"At this point, we need to fix the todos in "},{kind:"inlineCode",code:"getApplicableRefactors"},{kind:"text",value:" and "},{kind:"inlineCode",code:"getEditsForRefactor"},{kind:"text",value:"."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"In our case, for "},{kind:"inlineCode",code:"getApplicableRefactors"},{kind:"text",value:", we need to identify the node at the given position\nthat can be converted into a string template.\nFor "},{kind:"inlineCode",code:"getEditsForRefactor"},{kind:"text",value:", we also have to identify the node that should be refactored\nand compute the edits that apply the refactoring."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"To factor out the common identification of the node where the refactoring should be applied,\nor generally to maintain context between "},{kind:"inlineCode",code:"getApplicableRefactors"},{kind:"text",value:" and "},{kind:"inlineCode",code:"getEditsForRefactor"},{kind:"text",value:",\nit seems an abstraction for how to implement refactorings might be useful. Ideally, "},{kind:"inlineCode",code:"getApplicableRefactors"},{kind:"text",value:" returns a function that provides the edits together with each returned refactoring. An abstraction like this does that:"}]}},{kind:"code",html:'<span class="token comment">// src/RefactorProvider.ts</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> typescript <span class="token keyword">from</span> <span class="token string">"typescript"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> abstract <span class="token keyword">class</span> <span class="token class-name">RefactorProvider</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>\n        <span class="token parameter"><span class="token keyword">protected</span> readonly ts<span class="token punctuation">:</span> <span class="token keyword">typeof</span> typescript<span class="token punctuation">,</span>\n        <span class="token keyword">protected</span> readonly base<span class="token punctuation">:</span> typescript<span class="token punctuation">.</span>LanguageService</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * @param filter The filter that is applied to the returned refactors.\n     * Can be used for performance optimizations.\n     */</span>\n    abstract <span class="token function">getRefactors</span><span class="token punctuation">(</span>\n        context<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            program<span class="token punctuation">:</span> typescript<span class="token punctuation">.</span>Program<span class="token punctuation">;</span>\n            range<span class="token punctuation">:</span> typescript<span class="token punctuation">.</span>TextRange<span class="token punctuation">;</span>\n            sourceFile<span class="token punctuation">:</span> typescript<span class="token punctuation">.</span>SourceFile<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        filter<span class="token punctuation">:</span> RefactorFilter\n    <span class="token punctuation">)</span><span class="token punctuation">:</span> Refactor<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RefactorFilter</span> <span class="token punctuation">{</span>\n    refactorName<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n    actionName<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Refactor</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n    description<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n    actions<span class="token punctuation">:</span> RefactorAction<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RefactorAction</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n    description<span class="token punctuation">:</span> string<span class="token punctuation">;</span>\n    <span class="token function">getEdits</span><span class="token punctuation">(</span>\n        formatOptions<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>FormatCodeSettings<span class="token punctuation">,</span>\n        preferences<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>UserPreferences <span class="token operator">|</span> <span class="token keyword">undefined</span>\n    <span class="token punctuation">)</span><span class="token punctuation">:</span> ts<span class="token punctuation">.</span>RefactorEditInfo <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>',lang:"ts"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"Given a "},{kind:"inlineCode",code:"RefactorProvider"},{kind:"text",value:", implementing "},{kind:"inlineCode",code:"getApplicableRefactors"},{kind:"text",value:" and "},{kind:"inlineCode",code:"getEditsForRefactor"},{kind:"text",value:" should be easy now.\nThe implementation can be found "},{kind:"text",value:"not supported"},{kind:"text",value:"."}]}},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"Implementing a RefactorProvider"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"In this phase it is extremely useful to have hot reloading and a way to easily attach a debugger.\n"},{kind:"inlineCode",code:"@hediet/node-reload"},{kind:"text",value:" is a library that provides a fully featured hot reloading solution for Node JS.\n"},{kind:"text",value:"not supported"},{kind:"text",value:" for VS Code provides an easy way to debug mocha tests:"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"image",asset:new(a(40).RuntimeAsset)(a(107))}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"Alternatively, you can use my library "},{kind:"text",value:"not supported"},{kind:"text",value:" that works even without VS Code."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"Equipped with hot reloading, the core class now looks like this:"}]}},{kind:"code",html:'<span class="token comment">// src/ConvertToStringTemplateRefactoring.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n    hotClass<span class="token punctuation">,</span>\n    enableHotReload<span class="token punctuation">,</span>\n    registerUpdateReconciler\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@hediet/node-reload"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ts <span class="token keyword">from</span> <span class="token string">"typescript"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> RefactorProvider<span class="token punctuation">,</span> Refactor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./RefactorProvider"</span><span class="token punctuation">;</span>\n\n<span class="token function">enableHotReload</span><span class="token punctuation">(</span><span class="token punctuation">{</span> entryModule<span class="token punctuation">:</span> module <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Automatically reloads the new module when it changed</span>\n<span class="token function">registerUpdateReconciler</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Marks all methods of the class as hot.</span>\n<span class="token comment">// Hot methods are automatically restarted</span>\n<span class="token comment">// when they have been changed while being executed.</span>\n@<span class="token function">hotClass</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ConvertToStringTemplateRefactoring</span> <span class="token keyword">extends</span> <span class="token class-name">RefactorProvider</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> readonly refactoringName <span class="token operator">=</span> <span class="token string">"@hediet/ts-refactoring-lsp"</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> readonly convertToStringTemplate <span class="token operator">=</span> <span class="token string">"convertToStringTemplate"</span><span class="token punctuation">;</span>\n\n    <span class="token function">getRefactors</span><span class="token punctuation">(</span>\n        context<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            program<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>Program<span class="token punctuation">;</span>\n            range<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>TextRange<span class="token punctuation">;</span>\n            sourceFile<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>SourceFile<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        filter<span class="token punctuation">:</span> RefactorFilter\n    <span class="token punctuation">)</span><span class="token punctuation">:</span> Refactor<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n        <span class="token comment">// todo</span>\n        <span class="token keyword">debugger</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',lang:"ts"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"For hot reloading to work with TypeScript, "},{kind:"inlineCode",code:"tsc"},{kind:"text",value:" must be started in watch mode (or alternatively "},{kind:"inlineCode",code:"ts-node"},{kind:"text",value:" can be used)."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"At this point, we can already start debugging the tests.\nAs you can see, if the currently executed method is changed, it is simply reexecuted when continuing.\nThis is almost like an inline playground for refactorings:"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"image",asset:new(a(40).RuntimeAsset)(a(108))}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"The actual implementation is easy now."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"First, we need to find out which smallest AST node spans "},{kind:"inlineCode",code:"range"},{kind:"text",value:",\nthen we navigate the AST tree upwards until our parent is neither a binary ("},{kind:"inlineCode",code:"+"},{kind:"text",value:") nor a parenthesized expression.\nThen we traverse all descendants of that node to collect the parts of the final template string.\nWe then suggest the refactoring if at least one of these parts is a string literal:"}]}},{kind:"code",html:'<span class="token function">getRefactors</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    program<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>Program<span class="token punctuation">;</span>\n    range<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>TextRange<span class="token punctuation">;</span>\n    sourceFile<span class="token punctuation">:</span> ts<span class="token punctuation">.</span>SourceFile<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Refactor<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token function">findInnerMostNodeAt</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>sourceFile<span class="token punctuation">,</span> context<span class="token punctuation">.</span>range<span class="token punctuation">.</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSuitableOuterMostParent</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> parts <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParts</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>parts<span class="token punctuation">.</span>kind <span class="token operator">!==</span> <span class="token string">"stringLiteralSequence"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> action<span class="token punctuation">:</span> RefactorAction <span class="token operator">=</span> <span class="token punctuation">{</span>\n        description<span class="token punctuation">:</span> <span class="token string">"Convert to String Template"</span><span class="token punctuation">,</span>\n        name<span class="token punctuation">:</span> ConvertToStringTemplateRefactoring<span class="token punctuation">.</span>convertToStringTemplate<span class="token punctuation">,</span>\n        <span class="token function-variable function">getEdits</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">formatOptions<span class="token punctuation">,</span> preferences</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEdits</span><span class="token punctuation">(</span>\n                context<span class="token punctuation">.</span>sourceFile<span class="token punctuation">,</span>\n                node<span class="token punctuation">,</span>\n                parts<span class="token punctuation">.</span>parts\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            name<span class="token punctuation">:</span> ConvertToStringTemplateRefactoring<span class="token punctuation">.</span>refactoringName<span class="token punctuation">,</span>\n            description<span class="token punctuation">:</span> <span class="token string">"Convert to String Template"</span><span class="token punctuation">,</span>\n            actions<span class="token punctuation">:</span> <span class="token punctuation">[</span> action <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>',lang:"ts"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"The remaining implementation can be read "},{kind:"text",value:"not supported"},{kind:"text",value:"."}]}},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"Enabling the plugin"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"To enable the plugin, simply distribute it via npm, install it as dev dependency and add it to the project's tsconfig file:"}]}},{kind:"code",html:'<span class="token punctuation">{</span>\n    <span class="token string">"compilerOptions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"my-ts-plugin"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>',lang:"json"},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"It should now be available in most IDEs (like VS Code or Webstorm)!"}]}},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"Distribute the plugin via a VS Code Extension"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"For distributing the plugin via an VS Code extension, simply add a "},{kind:"inlineCode",code:"typescriptServerPlugins"},{kind:"text",value:" key to the "},{kind:"inlineCode",code:"contributes"},{kind:"text",value:" section of the "},{kind:"inlineCode",code:"package.json"},{kind:"text",value:" of your VS Code extension. The name refers to the name of the plugin's "},{kind:"inlineCode",code:"package.json"},{kind:"text",value:" which must be added as a dependency to your extension.\nSince "},{kind:"inlineCode",code:"vsce"},{kind:"text",value:" does not consider yarn workspaces, you have to publish your plugin first to npm and then install it as dependency to your VS Code extension."}]}},{kind:"code",html:'<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token string">"contributes"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token string">"typescriptServerPlugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                <span class="token string">"enableForWorkspaceTypeScriptVersions"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"@hediet/ts-refactoring-lsp"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>',lang:"json"},{kind:"heading",depth:2,body:{kind:"list",items:[{kind:"text",value:"Outlook"}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"Language service plugins can do much more.\nThey provide an easy way to implement custom features that can be easily distributed to your entire team, even\nwhen they use different IDEs."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"Sadly, these features are limited to the language service API, which makes sense if you want to support arbitrary IDEs.\nIf you want to implement a VS Code extension that needs unlimited access to the AST or typechecker of the currently opened project, but you don't want to spawn a second language server, you have to be creative as you can only use the fixed language service API to communicate with your language service plugin."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"However, there is trick: Start your own RPC server in your language service plugin on an random port and use "},{kind:"inlineCode",code:"getQuickInfoAtPosition"},{kind:"text",value:" at an impossible position from you VS Code extension to obtain that port!\n"},{kind:"text",value:"not supported"},{kind:"text",value:" you can find a sample implementation."}]}},{kind:"paragraph",body:{kind:"list",items:[{kind:"text",value:"I hope you enjoyed this post - if you have questions, you can ping me on twitter ;)"}]}}]},date:"Thu Oct 10 2019 02:00:00 GMT+0200 (GMT+02:00)",github:{org:"hediet",repo:"hediet-ts-refactoring-lsp"}},routeIndexProvider:new(a(15).DynamicRouteIndexProvider)(()=>a.e(0).then(a.t.bind(null,87,7)))}},107:function(n,s,a){n.exports=a.p+"0f2ae683f58ad711de822364a036626d.png"},108:function(n,s,a){n.exports=a.p+"8ba39e016e1884c42d499ff739d8b117.gif"},81:function(n,s,a){"use strict";function t(n){for(var a in n)s.hasOwnProperty(a)||(s[a]=n[a])}Object.defineProperty(s,"__esModule",{value:!0}),t(a(41)),t(a(42)),t(a(82)),t(a(83))},82:function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});const t=a(0);s.BlogDate=function(n){return t.createElement("div",{className:"component-BlogDate"},new Date(n.date).toLocaleDateString("en-US",{day:"numeric",year:"numeric",month:"short"}))}},83:function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});const t=a(0);s.GithubBadge=function(n){const s=`github.com/${n.org}/${n.repo}`;return t.createElement("a",{href:`https://github.com/${n.org}/${n.repo}`},t.createElement("img",{alt:"github repo",style:{border:"none"},src:`https://img.shields.io/badge/repo-${encodeURI(s).replace(/-/g,"--")}-informational.svg`}))}},85:function(n,s,a){"use strict";(function(n){Object.defineProperty(s,"__esModule",{value:!0});const t=a(0),e=a(81),p=a(84);s.BlogPage=class extends p.BasePage{constructor(){super(...arguments),this.module=n}get title(){return this.data.post.title}render(){const n=this.data.post;return t.createElement(e.PageFrame,Object.assign({},this.data.baseData),t.createElement("h1",null,n.title),t.createElement("div",{className:"badges",style:{display:"flex"}},t.createElement(e.BlogDate,{date:new Date(n.date)}),n.github&&t.createElement("div",{style:{marginLeft:"auto"}},t.createElement(e.GithubBadge,{org:n.github.org,repo:n.github.repo}))),t.createElement(e.ContentRenderer,{content:n.content}))}}}).call(this,a(20)(n))},95:function(n,s,a){const t=a(85),e=a(106).data,p=new t.BlogPage(e);n.exports.page=p}}]);